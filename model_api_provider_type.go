/*
Vigo Bus Core API

This is the API for the Vigo Bus Core project.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ApiProviderType the model 'ApiProviderType'
type ApiProviderType string

// List of api.ProviderType
const (
	ProviderTypeTelegram ApiProviderType = "telegram"
)

// All allowed values of ApiProviderType enum
var AllowedApiProviderTypeEnumValues = []ApiProviderType{
	"telegram",
}

func (v *ApiProviderType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApiProviderType(value)
	for _, existing := range AllowedApiProviderTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApiProviderType", value)
}

// NewApiProviderTypeFromValue returns a pointer to a valid ApiProviderType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApiProviderTypeFromValue(v string) (*ApiProviderType, error) {
	ev := ApiProviderType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApiProviderType: valid values are %v", v, AllowedApiProviderTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApiProviderType) IsValid() bool {
	for _, existing := range AllowedApiProviderTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to api.ProviderType value
func (v ApiProviderType) Ptr() *ApiProviderType {
	return &v
}

type NullableApiProviderType struct {
	value *ApiProviderType
	isSet bool
}

func (v NullableApiProviderType) Get() *ApiProviderType {
	return v.value
}

func (v *NullableApiProviderType) Set(val *ApiProviderType) {
	v.value = val
	v.isSet = true
}

func (v NullableApiProviderType) IsSet() bool {
	return v.isSet
}

func (v *NullableApiProviderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiProviderType(val *ApiProviderType) *NullableApiProviderType {
	return &NullableApiProviderType{value: val, isSet: true}
}

func (v NullableApiProviderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiProviderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

