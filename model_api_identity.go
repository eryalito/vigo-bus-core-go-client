/*
Vigo Bus Core API

This is the API for the Vigo Bus Core project.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ApiIdentity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiIdentity{}

// ApiIdentity struct for ApiIdentity
type ApiIdentity struct {
	// FavoriteStops is a list of the user's favorite stops
	FavoriteStops []ApiStop `json:"favorite_stops,omitempty"`
	// ID is the unique identifier of the identity
	Id *int32 `json:"id,omitempty"`
	// Provider is the type of the identity provider
	Provider *ApiProviderType `json:"provider,omitempty"`
	// UUID is the unique identifier of the identity, usually provided by the auth provider
	Uuid *string `json:"uuid,omitempty"`
}

// NewApiIdentity instantiates a new ApiIdentity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiIdentity() *ApiIdentity {
	this := ApiIdentity{}
	return &this
}

// NewApiIdentityWithDefaults instantiates a new ApiIdentity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiIdentityWithDefaults() *ApiIdentity {
	this := ApiIdentity{}
	return &this
}

// GetFavoriteStops returns the FavoriteStops field value if set, zero value otherwise.
func (o *ApiIdentity) GetFavoriteStops() []ApiStop {
	if o == nil || IsNil(o.FavoriteStops) {
		var ret []ApiStop
		return ret
	}
	return o.FavoriteStops
}

// GetFavoriteStopsOk returns a tuple with the FavoriteStops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiIdentity) GetFavoriteStopsOk() ([]ApiStop, bool) {
	if o == nil || IsNil(o.FavoriteStops) {
		return nil, false
	}
	return o.FavoriteStops, true
}

// HasFavoriteStops returns a boolean if a field has been set.
func (o *ApiIdentity) HasFavoriteStops() bool {
	if o != nil && !IsNil(o.FavoriteStops) {
		return true
	}

	return false
}

// SetFavoriteStops gets a reference to the given []ApiStop and assigns it to the FavoriteStops field.
func (o *ApiIdentity) SetFavoriteStops(v []ApiStop) {
	o.FavoriteStops = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApiIdentity) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiIdentity) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApiIdentity) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ApiIdentity) SetId(v int32) {
	o.Id = &v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *ApiIdentity) GetProvider() ApiProviderType {
	if o == nil || IsNil(o.Provider) {
		var ret ApiProviderType
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiIdentity) GetProviderOk() (*ApiProviderType, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *ApiIdentity) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given ApiProviderType and assigns it to the Provider field.
func (o *ApiIdentity) SetProvider(v ApiProviderType) {
	o.Provider = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *ApiIdentity) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiIdentity) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *ApiIdentity) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *ApiIdentity) SetUuid(v string) {
	o.Uuid = &v
}

func (o ApiIdentity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiIdentity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FavoriteStops) {
		toSerialize["favorite_stops"] = o.FavoriteStops
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	return toSerialize, nil
}

type NullableApiIdentity struct {
	value *ApiIdentity
	isSet bool
}

func (v NullableApiIdentity) Get() *ApiIdentity {
	return v.value
}

func (v *NullableApiIdentity) Set(val *ApiIdentity) {
	v.value = val
	v.isSet = true
}

func (v NullableApiIdentity) IsSet() bool {
	return v.isSet
}

func (v *NullableApiIdentity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiIdentity(val *ApiIdentity) *NullableApiIdentity {
	return &NullableApiIdentity{value: val, isSet: true}
}

func (v NullableApiIdentity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiIdentity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


