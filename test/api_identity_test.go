/*
Vigo Bus Core API

Testing IdentityAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/eryalito/vigo-bus-core-go-client"
)

func Test_openapi_IdentityAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IdentityAPIService ApiUsersProviderUuidFavoriteStopsStopNumberDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var provider string
		var uuid string
		var stopNumber int32

		resp, httpRes, err := apiClient.IdentityAPI.ApiUsersProviderUuidFavoriteStopsStopNumberDelete(context.Background(), provider, uuid, stopNumber).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIService ApiUsersProviderUuidFavoriteStopsStopNumberPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var provider string
		var uuid string
		var stopNumber int32

		resp, httpRes, err := apiClient.IdentityAPI.ApiUsersProviderUuidFavoriteStopsStopNumberPost(context.Background(), provider, uuid, stopNumber).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIService ApiUsersProviderUuidGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var provider string
		var uuid string

		resp, httpRes, err := apiClient.IdentityAPI.ApiUsersProviderUuidGet(context.Background(), provider, uuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIService ApiUsersProviderUuidPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var provider string
		var uuid string

		resp, httpRes, err := apiClient.IdentityAPI.ApiUsersProviderUuidPost(context.Background(), provider, uuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
